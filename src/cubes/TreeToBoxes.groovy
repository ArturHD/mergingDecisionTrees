/*
 Copyright (c) 2013 by Artur Andrzejak <arturuni@gmail.com>, Felix Langner, Silvestre Zabala

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.


 */

package cubes

import java.util.regex.Pattern
import weka.core.Utils

@Typed
abstract class TreeToBoxes<T> {
    // CAUTION: fathers and leaves must be empty (but initialized) before calling getReverseDAG

    // For each ClassifierTree it stores its father as value
    Map<T, T> fathers = [:]
    // List of found leaves
    List<T> leaves = []
    // index of the child for the same father (i.e. first child is 0 etc.)
    Map<T, Integer> index = [:]

    // The pattern of the nominal attributes generated by the Discretize filter
    private String fpre = "[-+]?([0-9]*\\.)?[0-9]+([eE][-+]?[0-9]+)?"
    private String rp = "'(\\((-inf|$fpre)-($fpre|inf)(]|\\))||All)'"
    Pattern rangePattern = Pattern.compile(rp)

    // Builds a DAG where edges go from tree-children to fathers (stored in map fathers)
    // The leaves are stored in List leaves
    def getReverseDAG(T node) {
        if (!fathers.containsKey(node)) {
            // this is root, has no father
            fathers[node] = null
            index[node] = -1    // special constant for root
        }
        if (isLeaf(node)) {
            leaves << node
            return
        }
        // add all children, their value is node (father)
        List<T> children = getChildren(node)
        for (int i = 0; i < children.size(); i++) {
            def child = children[i]
            fathers[child] = node
            index[child] = i
        }
        // recursively visit all sub-trees
        for (child in children) {
            getReverseDAG child
        }
    }

    abstract List<T> getChildren(T t)

    abstract boolean isLeaf(T t)

    def visitPathFast(T startLeaf) {
        T myFather = fathers[startLeaf]
        printNode(startLeaf)
        while (myFather != null) {
            printNode(myFather)
            myFather = fathers[myFather]
        }
    }

    abstract int getClassValue(T t)

    abstract double getConfidence(T t)

    abstract double[] getClassProbDistribution(T t)

    abstract String getClassName(T t)

    abstract int getAttributeIndex(T t)

    abstract String getAttributeName(T t)

    abstract double getSplitPoint(T t)

    abstract boolean isNumericBinarySplit(T t)

    abstract boolean isParsebleNumericRange(T t, int childIndex)

    abstract Pair<Double, Double> getBounds(T t, int childIndex)

    void printNode(T node) {
        if (isLeaf(node)) {
            print "Leaf: ${getClassName(node)}, confidence=${Utils.roundDouble(getConfidence(node), 2)}"
        } else {
            def attributeIndex = getAttributeIndex(node)
            def attributeName = getAttributeName(node)
            print "Node at attribute #$attributeIndex (${attributeName}), splitpoint = ${getSplitPoint(node)}"
        }
        println " (child #${index[node]})"
    }

    abstract boolean isLesserChild(T t)

    abstract int getNumDimensions(T t)

    ClassCube leafToCube(T startLeaf) {
        assert isLeaf(startLeaf)

        int nDims = getNumDimensions(startLeaf)
        def cube = new ClassCube(nDims)
        // todo: possibly add "setters" in ClassCube
        cube.setClassValue(getClassValue(startLeaf))
        cube.setConfidence(getConfidence(startLeaf))
        def distribution = getClassProbDistribution(startLeaf)
        assert Math.abs(Utils.sum(distribution) - 1.0) < 0.001 // Check if dist is normalized
        cube.setClassProbDistribution(distribution)

        T previousNode = startLeaf
        T currentNode = fathers[previousNode]
        while (currentNode != null) {
            def attIndex = getAttributeIndex(currentNode)

            def lower = cube.getLower(attIndex)
            def upper = cube.getUpper(attIndex)

            if (isNumericBinarySplit(currentNode)) {
                def splitPoint = getSplitPoint(currentNode)

                if (isLesserChild(previousNode)) { // lesser (<= splitpoint) child
                    double newUpper = Math.min(upper, splitPoint)
                    cube.setUpper(attIndex, newUpper)
                } else { // greater (> splitpoint) child
                    double newLower = Math.max(lower, splitPoint)
                    cube.setLower(attIndex, newLower)
                }
            } else {
                if (isParsebleNumericRange(currentNode, index[previousNode])) {
                    def bounds = getBounds(currentNode, index[previousNode])
                    double newLower = Math.max(lower, bounds.first.doubleValue())
                    double newUpper = Math.min(upper, bounds.second.doubleValue())
                    cube.setBounds(attIndex, newLower, newUpper)
                } else {
                    throw new IllegalArgumentException("$currentNode is not a valid numeric attribute")
                }
            }
            previousNode = currentNode
            currentNode = fathers[currentNode]
        }

        return cube
    }

    abstract int getNumInstances(T t)

    BoxSet getBoxes() {
        def boxes = BoxSet.create(leaves.size())
        for (it in leaves) {
            boxes << this.leafToCube(it)
        }
        return boxes
    }

}
